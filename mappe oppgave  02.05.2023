suppressPackageStartupMessages(library(WDI))
suppressPackageStartupMessages(library(plyr))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(vtable))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(countrycode))

# 1. BNP per innbyggere (alle år) og initial nivå på BNP per innbyggere. WDI-variabel =  "NY.GDP.PCAP.PP.KD". 
# Velg startår = 2000 og sluttår = 2019
df_gdp0<-WDI(
  country = "all",
  indicator = c('gdppc'="NY.GDP.PCAP.PP.KD"),  
  start = 2000,
  end = 2019,
  extra = TRUE, # det å sette "extra = TRUE" fører til at vi laster inn ekstra informasjon som vi kan benytte seinere (f.eks. variabelen "region")
  cache = NULL,
  latest = NULL,
  language = "en"
)
# velger ut relevante variabler
df_gdp <- subset(df_gdp0, select = c(country, region, income, iso2c, iso3c, year, gdppc) ) %>%  
  arrange(iso3c, year) 
# Vi ønsker å ta vekk land som ikke har en iso3c kode. Dessverre er manglende observasjoner for "iso3c" (landkode) kodet som "blanks" istedet for "missing". Denne koden korrigerer dette.
df_gdp <- replace(df_gdp, df_gdp=='', NA)
# Tar vekk observasjoner som mangler data på gdppc og iso3c. 
df_gdp <- df_gdp[complete.cases( df_gdp$gdppc, df_gdp$iso3c),] 
df_gdp = df_gdp  %>%  
  dplyr::mutate(year = as.numeric(year))
# Noen land har flere observasjoner for samme år (f.eks afghanistan år 2010). Vi ønsker å ha én observasjon per land og år. Tar vekk duplikater for land og år, beholder observasjonen med størst gdppc (denne regelen kan diskuteres)
df_gdp <- df_gdp[!duplicated(df_gdp[c("iso3c", "year", max("gdppc"))]), ]  %>%  
  arrange(iso3c, year) 
# Lager et datasett med Y0 (nivå på BNP per innbyggere i år 2000)
df_gdp2000  <- df_gdp %>%  
  arrange(iso3c, year) %>% 
  group_by(iso3c) %>% #Behold den første observasjonen for BNP per innbyggere (Y0)
  slice(1) %>%
  ungroup()
df_gdp2000 = subset(df_gdp2000, select = -c(year) )
# Gir variabelen nytt navn slik at vi kan identifisere den i datasetet. 
df_gdp2000 <- plyr:: rename(df_gdp2000,c("gdppc" = "gdppc0"))
# Setter sammen data for BNP per innbygger alle år, med BNP per innbygger år 2000.
bnp_cap <- left_join(df_gdp,df_gdp2000, by=c("country", "iso2c", "iso3c", "region", "income")) 


# 2. Humankapital (gjennomsnittlig antall år i skole blant befolkningen eldre enn 15 år). WDI-variabel = BAR.SCHL.15UP 
df_educ0<-WDI(
  country = "all",
  indicator = c('educ'="BAR.SCHL.15UP"),  
  start = 2000,
  end = 2019,
  extra = TRUE,
  cache = NULL,
  latest = NULL,
  language = "en"
)
# Beholder nødvendige variabler
df_educ <- subset(df_educ0, select = c(country, region, income, iso2c, iso3c, year, educ) ) %>%  
  arrange(iso3c, year) 
df_educ <- df_educ[complete.cases(df_educ$educ),] %>%  
  arrange(iso3c, year) 
df_educ = df_educ %>%  
  arrange(iso3c, year) %>%  
  mutate(educ = as.numeric(educ, na.rm = TRUE)) %>% 
  # Beregne gjennomsnittlig år i skole for tidsperioden 2000 - 2019 for hvert land, basert på tilgjenglig data (vil være 2000.2005,2010)
  group_by(iso3c) %>% 
  mutate(avg_educ = mean(educ, na.rm = TRUE))
# Her tar jeg vekk variabelen "year". Jeg gjør dette fordi vi bare har en observasjon på utdanning per land. Vi ønsker å bruke denne verdi for alle år. 
df_educ <- subset(df_educ, select = c(country, region, income, iso2c, iso3c, avg_educ)) 
utdanning <- df_educ[!duplicated(df_educ[c("iso3c")]), ]  %>%  
  arrange(iso3c) 


# 3. Gjennomsnittlig sparing for perioden 2000-2015 (lag fordi det kan ta litt tid for sparing å bli til investering)
df_nsy0<-WDI(
  country = "all",
  indicator = c( 'nsy'="NY.ADJ.NNAT.GN.ZS"),  
  start = 2000,
  end = 2015,
  extra = TRUE,
  cache = NULL,
  latest = NULL,
  language = "en"
)
df_nsy <- subset(df_nsy0, select = c(country, region, income, iso2c, iso3c, year, nsy) ) %>%  
  arrange(iso3c, year) #Behold nødvendige variabler
df_nsy <- df_nsy[complete.cases(df_nsy$nsy),] %>%  
  arrange(iso3c, year) 
df_nsy = df_nsy %>%  
  arrange(iso3c, year) %>%  
  mutate(nsy = as.numeric(nsy, na.rm = TRUE)) %>% 
  group_by(iso3c) %>% 
  mutate(avg_nsy = mean(nsy, na.rm = TRUE))

df_nsy <- subset(df_nsy, select = c(country, region, income, iso2c, iso3c, avg_nsy)) 
sparerate <- df_nsy[!duplicated(df_nsy[c("iso3c")]), ]  %>%  
  arrange(iso3c) 


# 4. Vekst i arbeidskraften (n)
df_lf0<-WDI(
  country = "all",
  indicator = c('lf'="JI.TLF.TOTL"),  # lf = labor force
  start = 2000,
  end = 2019,
  extra = TRUE, 
  cache = NULL,
  latest = NULL,
  language = "en"
)
df_lf <- subset(df_lf0, select = c(country, region, income, iso2c, year, lf) ) %>%  
  arrange(iso2c, year) 
df_lf <-   plyr:: rename(df_lf,c("iso2c" = "iso3c")) # variabelen som identifiserer land med kode er feil i datasetet. Dette korrigerer dette
df_lf <- replace(df_lf, df_lf=='', NA)
df_lf [df_lf == 0]<-NA
df_lf <- df_lf[complete.cases(df_lf$iso3c, df_lf$lf),] 
df_lf = df_lf  %>%  
  mutate(year = as.numeric(year)) 
df_lf <- df_lf[!duplicated(df_lf[c("iso3c", "year")]), ]  %>%  
  arrange(iso3c, year) 
# Ta fram vekstraten i arbeidskraften (n). Vi har ikke data for hvert år i alle land. 
# For å beregne gjennomsnittlig årlig vekst må vi lage en variabel som måler antallet tidsperioder mellom hver observasjon.
df_n = df_lf %>%  
  arrange(iso3c, year) %>%
  ddply("iso3c",transform,
        t=c(NA,diff(year)),
        lf_growth=c(NA,diff(log(lf)))) #Vekstrate uten hensyn til tidsintervall
df_n <- df_n[complete.cases(df_n$t, df_n$lf_growth),] # Ta vekk observasjoner som mangler data på t
#Nå kan vi ta fram årlig vekstrate
df_n = df_n %>%  
  mutate(t = as.numeric(t)) %>%   
  mutate(lf_growth = as.numeric(lf_growth))
df_n <- transform(df_n, n =lf_growth/t)
# gjennomsnittlig vekstrate i arbeidskraften for hvert land
df_n <- df_n %>% # 
  ddply("iso3c",transform,
        avg_n=mean(n, na.rm = TRUE)) #Gjennomsnittlig årlig vekstrate i arbeidskraften
df_n <- subset(df_n, select = c(iso3c, avg_n) )
arbeid_vekst <- df_n[!duplicated(df_n["iso3c"]), ]  %>%  
  arrange(iso3c)

# 5. Lag et datasett som inneholder BNP data, utdanningsdata, sparing, og arbeidskraftsdata
df <- left_join(bnp_cap, utdanning, by=c("country", "iso2c", "iso3c", "region", "income"))
df <- left_join(df, sparerate, by=c("country", "iso2c", "iso3c", "region", "income"))
df <- left_join(df, arbeid_vekst, by="iso3c")
df <- subset(df, select = c(country, region, income, iso2c, iso3c, year, gdppc, gdppc0, avg_educ, avg_nsy, avg_n))

# Mange observasjoner representerer aggregerte regioner. Vi ønsker å ta vekk disse. Det finnes helt sikkert en bedre måte å gjøre dette på. Dette er den måten jeg kom på.
df_samlet <- df  %>%  
  filter(iso2c!='1A' & iso2c !='1W' & iso2c != '4E' & iso2c != '7E' & iso2c !='8S'
         & iso2c !='B8' & iso2c !='EU' & iso2c !='F1' & iso2c !='OE' & iso2c !='S1' & iso2c !='S2' & iso2c !="S3" 
         & iso2c !='S4' & iso2c !='T2' & iso2c !='T3' & iso2c !='T4' & iso2c !='T5' & iso2c !='T6' & iso2c !='T7' 
         & iso2c !='V1' & iso2c !='V2' & iso2c !='V3' & iso2c !='V4' & iso2c !='XC' & iso2c !='XD' & iso2c !='XE' 
         & iso2c !='XF' & iso2c !='XG' & iso2c !='XH' & iso2c !='XI' & iso2c !='XJ' & iso2c !='XL' & iso2c !='XM' 
         & iso2c !='XN' & iso2c !='XO' & iso2c !='XP' & iso2c !='XQ' & iso2c !='XT' & iso2c !='XU' & iso2c !='Z4' 
         & iso2c !='Z7' & iso2c !='ZF'& iso2c !='ZG'  & iso2c !='ZH' & iso2c !='ZI'  & iso2c !='ZJ'  & iso2c !='ZQ'  
         & iso2c !='ZT'  & iso2c !='Z7')  %>% 
  arrange(iso3c, year) 


# 6. Lag et datasett for resterende variabler.
df_rest0<-WDI(
  country = "all",
  indicator = c('poptot'="SP.POP.TOTL", 'gi'="NE.GDI.FTOT.KD.ZG", 'gx'="NE.EXP.GNFS.KD.ZG", 'nry'="NY.ADJ.DRES.GN.ZS", 'p'="SP.POP.GROW" ),  
  start = 2000,
  end = 2019,
  extra = TRUE,
  cache = NULL,
  latest = NULL,
  language = "en"
)
df_rest0<- replace(df_rest0, df_rest0=='', NA)
df_rest <- df_rest0[complete.cases( df_rest0$iso3c),]  %>%  
  arrange(iso2c) 
# Ta vekk observasjoner som ikke representerer land.
df_rest <- df_rest  %>%  
  filter(iso2c!='1A' & iso2c !='1W' & iso2c != '4E' & iso2c != '7E' & iso2c !='8S'
         & iso2c !='B8' & iso2c !='EU' & iso2c !='F1' & iso2c !='OE' & iso2c !='S1' & iso2c !='S2' & iso2c !="S3" 
         & iso2c !='S4' & iso2c !='T2' & iso2c !='T3' & iso2c !='T4' & iso2c !='T5' & iso2c !='T6' & iso2c !='T7' 
         & iso2c !='V1' & iso2c !='V2' & iso2c !='V3' & iso2c !='V4' & iso2c !='XC' & iso2c !='XD' & iso2c !='XE' 
         & iso2c !='XF' & iso2c !='XG' & iso2c !='XH' & iso2c !='XI' & iso2c !='XJ' & iso2c !='XL' & iso2c !='XM' 
         & iso2c !='XN' & iso2c !='XO' & iso2c !='XP' & iso2c !='XQ' & iso2c !='XT' & iso2c !='XU' & iso2c !='Z4' 
         & iso2c !='Z7' & iso2c !='ZF'& iso2c !='ZG'  & iso2c !='ZH' & iso2c !='ZI'  & iso2c !='ZJ'  & iso2c !='ZQ'  
         & iso2c !='ZT'  & iso2c !='Z7')  %>% 
  arrange(iso3c, year) 
df_rest <- subset(df_rest, select = c("country", "region", "income", "iso3c", "iso2c", "year", "poptot", "p", "nry", "gi", "gx"))
df_all <- left_join(df_samlet, df_rest, by=c("country", "region", "income", "iso2c", "iso3c", "year"))
# Lag en rekkefølge til variablene slik at det er enklere å få en oversikt over datamaterialet.
col_order <- c("country",  "region", "income", "iso3c", "iso2c", "year", "gdppc", "gdppc0", "poptot", "p", "avg_n", "avg_nsy", "nry", "gi", "gx", "avg_educ")
df_all <- df_all[, col_order]



# Ta fram vekstraten og gjennomsnitt for resterende variabler
df_growth0 = df_all %>%  
  
  # Sorter på år og land  
  arrange(iso3c, year) %>%  
  ddply("iso3c",transform,
        gdpgrowth=c(NA,diff(log(gdppc)))*100) %>%  
  
  # Årlig vekstrate i gdppc for hvert land
  mutate(gdpgrowth = as.numeric(gdpgrowth, na.rm = TRUE)) %>% 
  
  # Gjennomsnittlig årlig vekstrate i BNP per innbygger for hvert land i perioden  
  ddply("iso3c",transform,avg_gdpgrowth=mean(gdpgrowth, na.rm = TRUE), 
        
        # Gjennomsnittlig årlig vekstrate i investeringer for hvert land  i perioden        
        avg_gi=mean(gi, na.rm = TRUE), 
        
        # Gjennomsnittlig årlig vekstrate (negativ) i naturressurser for hvert land  i perioden        
        avg_nry=mean(nry, na.rm = TRUE),  
        # Gjennomsnittlig årlig vekstrate i eksport for hvert land  i perioden  
        avg_gx=mean(gx, na.rm = TRUE),       
        
        # Gjennomsnittlig årlig vekstrate i befolkningen for hvert land  i perioden        
        avg_p=mean(p, na.rm = TRUE))  

#View(df_growth0)
df_growth0 <-  replace(df_growth0, df_growth0=='', NA)
df_growth <- df_growth0[complete.cases( df_growth0$country, df_growth0$income, df_growth0$iso3c, df_growth0$avg_gdpgrowth, df_growth0$gdppc0, df_growth0$avg_n, df_growth0$avg_p, df_growth0$avg_nsy, df_growth0$avg_nry,df_growth0$avg_gi, df_growth0$avg_gx, df_growth0$avg_educ),] # Ta vekk land som mangler data 
df_growth <- subset(df_growth, select = c("country",  "region", "income", "iso3c", "iso2c","year", "poptot", "gdppc", "gdppc0", "avg_gdpgrowth", "avg_n", "avg_p", "avg_nsy", "avg_nry", "avg_gi", "avg_gx", "avg_educ"))
# Lager datasettet som skal brukes i analysen
df_growth2019  <- df_growth %>%  
  arrange(iso3c, year) %>% 
  group_by(iso3c) %>% 
  slice(n()) %>% # Behold den SISTE observasjonen for hvert land
  ungroup()



# Lager en variabel som er logaritmen av BNP per innbygger.
df_growth2019$dppc <-as.numeric(df_growth2019$gdppc)
df_growth2019$ln_gdppc<-log(df_growth2019$gdppc) 
df_growth2019$ln_gdppc0<-log(df_growth2019$gdppc0) 


# ordner variablene slik at 
df_growth2019 <- subset(df_growth2019, select = c("country",  "region", "income", "iso3c", "iso2c","year", "poptot", "gdppc","ln_gdppc", "gdppc0","ln_gdppc0", "avg_gdpgrowth", "avg_n", "avg_p", "avg_nsy", "avg_nry", "avg_gi", "avg_gx", "avg_educ"))

model_a <-lm(ln_gdppc ~ avg_educ, data = df_growth2019)
summary(model_a)



## Resultater
### Deskriptiv statistikk


options(scipen = 999)
library(psych)
Sys.setlocale(locale="no_NO")
table_des<-round(describe(df_growth2019[,c('gdppc','ln_gdppc',
                                           'avg_gdpgrowth','avg_n','avg_p', 'avg_nsy',
                                           'avg_nry','avg_gi','avg_gx','avg_educ',
                                           'ln_gdppc0')], fast=TRUE),2)
table_des<- as.data.frame(table_des)

#Summary statistics
df <- subset(df_growth2019, select = c('ln_gdppc','avg_gdpgrowth','avg_n','avg_p', 'avg_nsy','avg_nry','avg_gi','avg_gx','avg_educ'))

# Gi beskrivende navn til variablene (i samme rekkefølge som de ligger i datasettet)
labs <- c("log BNP per innbygger i 2019 (ln_gdppc)","Gjennomsnitlig årlig vekstrate i BNP pc 2000-2019 (%) (avg_gdpgrowth)", "Gjennomsnittlig årlig vekstrate i arbeidskraften (%) (avg_n)","Gjennomsnittlig årlig befolkningsvekst (%) (avg_p)","Gjennomsnittlig sparing for perioden 2000-2015 (%) (avg_nsy)","Gjennomsnittlig årlig vekstrate (negativ) i naturressurser (%) (avg_nry)", "Gjennomsnittlig årlig vekstrate i investeringer (%) (avg_gi)","Gjennomsnittlig årlig vekstrate i eksport (%)(avg_gx)","Gjennomsnittlig antall år i skole (avg_educ)") 
#Lager tabellen
st(df, labels=labs,
   summ = list(
     c('notNA(x)','mean(x)','sd(x)','min(x)','max(x)'), 
     c('notNA(x)','mean(x)')),
   summ.names = list(
     c('N','Gjennomsnitt','SD','Min','Maks') 
   ))

#| fig-cap: "Forholdet mellom sparing og logaritmen BNP per capita"

ggplot(df_growth2019, aes(x = avg_nsy, y = ln_gdppc, color = region)) +
  geom_point(size = 3, alpha = 0.8) +
  scale_color_brewer(type = "qual", palette = "Set1") +
  labs(x = "Gjennomsnittlig sparing for perioden 2000-2015",
       y = "ln BNP per capita",
       title = "Forholdet mellom sparing og logaritmen BNP per capita",
       subtitle = "Data fra 2019") +
  theme_minimal() +
  theme(plot.title = element_text(face = "bold", size = 16),
        plot.subtitle = element_text(size = 14),
        axis.title = element_text(face = "bold", size = 12),
        legend.title = element_blank(),
        legend.position = "bottom",
        legend.text = element_text(size = 10))



#| fig-cap: "Forholdet mellom befolkningsvekst og BNP per capita"

ggplot(df_growth2019, aes(x = avg_p, y = ln_gdppc, color = region)) +
  geom_point(size = 3, alpha = 0.8) +
  scale_color_brewer(type = "qual", palette = "Set1") +
  labs(x = "Gjennomsnittlig årlig vekstrate i befolkningen",
       y = "log BNP per capita",
       title = "Forholdet mellom vekstrate i befolkningen og BNP per capita",
       subtitle = "Data fra 2019") +
  theme_minimal() +
  theme(plot.title = element_text(size = 18, face = "bold", color = "#333333"),
        plot.subtitle = element_text(size = 14, color = "#555555"),
        axis.title = element_text(size = 14, face = "bold", color = "#333333"),
        axis.text = element_text(size = 12, color = "#333333"),
        legend.position = "bottom",
        legend.title = element_blank(),
        legend.text = element_text(size = 12, color = "#333333"))




#| fig-cap: "Forholdet mellom utdanning og BNP per capita"

ggplot(df_growth2019, aes(x = avg_educ, y = ln_gdppc, color = region)) +
  geom_point(size = 3, alpha = 0.8) +
  scale_color_brewer(type = "qual", palette = "Dark2") +
  labs(x = "Gjennomsnittlig utdanning i antall år",
       y = "log BNP per capita",
       title = "Forholdet mellom utdanning og BNP per capita",
       subtitle = "Data fra 2019") +
  theme_minimal() +
  theme(plot.title = element_text(size = 18, face = "bold", color = "#333333"),
        plot.subtitle = element_text(size = 14, color = "#555555"),
        axis.title = element_text(size = 14, face = "bold", color = "#333333"),
        axis.text = element_text(size = 12, color = "#333333"),
        legend.position = "bottom",
        legend.title = element_blank(),
        legend.text = element_text(size = 12, color = "#333333"))
#| fig-cap: "Forholdet mellom sparing og vekst i BNP per capita"
ggplot(df_growth2019, aes(x=avg_nsy, y=avg_gdpgrowth, color=region)) +
  geom_point(size=3, alpha=0.8) +
  scale_color_brewer(palette="Set1") +
  labs(x="Gjennomsnittlig sparing for perioden 2000-2015",
       y="Vekst i BNP per capita",
       title="Forholdet mellom sparing og vekst i BNP per capita") +
  theme_minimal() +
  theme(plot.title = element_text(size=18, face="bold"),
        axis.title.x = element_text(size=14),
        axis.title.y = element_text(size=14),
        axis.text = element_text(size=12))

#| fig-cap: "Forholdet mellom utdanning og vekst i BNP per capita"
ggplot(df_growth2019, aes(x = avg_educ, y = avg_gdpgrowth, color = region)) +
  geom_point(size = 3, alpha = 0.8) +
  scale_color_brewer(palette = "Dark2") +
  labs(x = "Gjennomsnittlig utdanning i antall år", y = "Vekstrate i BNP per capita",
       title = "Forholdet mellom utdanning og vekst i BNP per capita") +
  theme_minimal() +
  theme(plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
        axis.title.x = element_text(size = 14),
        axis.title.y = element_text(size = 14),
        legend.position = "bottom",
        legend.title = element_blank(),
        legend.text = element_text(size = 12))



suppressPackageStartupMessages(library(scales))
##tar vekk land som mangler observasjoner dett fører til penere graf 
df_growth2019_n <- df_growth2019[complete.cases(df_growth2019$region,df_growth2019$poptot, df_growth2019$avg_p, df_growth2019$gdppc),]

plot1 <- ggplot(df_growth2019_n, aes(x = avg_p , y = ln_gdppc, na.rm = TRUE)) +
  xlab("Befolkningsvekst") + 
  ylab("BNP per innbygger 2019") + 
  theme_minimal(base_size = 14, base_family = "Georgia") + 
  geom_point(aes(size = poptot, color = region), alpha = 0.8) + 
  scale_x_continuous(labels = dollar)  + 
  scale_size_area(guide = "none", max_size = 14) + 
  theme(legend.text = element_text(size = 10,color="black"))+  
  scale_colour_manual(values = rainbow(9)) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_rect(fill = 'white'))+
  scale_y_continuous(trans = 'log2', labels = dollar, breaks=c(500, 2000, 8000, 32000, 120000)) + # logaritmere BNP pc og velg hvilke "ticks" som skal vises
  scale_x_continuous(breaks=c(-1, -0.5, 0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5 )) # Velg vilke "ticks" som skal vises på x-akselen
plot1


suppressPackageStartupMessages(library(sjPlot))
suppressPackageStartupMessages(library(sjmisc))
suppressPackageStartupMessages(library(sjlabelled))
model1 <- lm(avg_gdpgrowth  ~ avg_educ + avg_n + avg_p + avg_nsy + avg_nry + avg_gi +  ln_gdppc0, data= df_growth2019)
tab_model(model1)

model2 <- lm(avg_gdpgrowth ~ avg_educ + avg_n + avg_p + avg_nsy + avg_nry + avg_gi + ln_gdppc0 + avg_gx, data= df_growth2019)
tab_model(model2)


df <- df_growth2019[complete.cases( df_growth2019$avg_educ,df_growth2019$avg_n,df_growth2019$avg_p, df_growth2019$avg_nsy, df_growth2019$avg_nry, df_growth2019$avg_gi,df_growth2019$ln_gdppc0, df_growth2019$avg_gx),]
Q1_educ <- quantile(df$avg_educ, .25 )
Q3_educ <- quantile(df$avg_educ, .75)
IQR_educ <- IQR(df$avg_educ)
Q1_n <- quantile(df$avg_n, .25 )
Q3_n <- quantile(df$avg_n, .75)
IQR_n <- IQR(df$avg_n)
Q1_p <- quantile(df$avg_p, .25 )
Q3_p <- quantile(df$avg_p, .75)
IQR_p <- IQR(df$avg_p)
Q1_nsy <- quantile(df$avg_nsy, .25 )
Q3_nsy <- quantile(df$avg_nsy, .75)
IQR_nsy <- IQR(df$avg_nsy)
Q1_nry <- quantile(df$avg_nry, .25 )
Q3_nry <- quantile(df$avg_nry, .75)
IQR_nry <- IQR(df$avg_nry)
Q1_gi <- quantile(df$avg_gi, .25 )
Q3_gi <- quantile(df$avg_gi, .75)
IQR_gi <- IQR(df$avg_gi)
Q1_ln_gdppc0 <- quantile(df$ln_gdppc0, .25 )
Q3_ln_gdppc0 <- quantile(df$ln_gdppc0, .75)
IQR_ln_gdppc0 <- IQR(df$ln_gdppc0)
Q1_gx <- quantile(df$avg_gx, .25 )
Q3_gx <- quantile(df$avg_gx, .75)
IQR_gx <- IQR(df$avg_gx)

no_outliers <- subset(df, df$avg_educ > (Q1_educ - 1.5*IQR_educ) & df$avg_educ < (Q3_educ + 1.5*IQR_educ) & df$avg_n > (Q1_n - 1.5*IQR_n) & df$avg_n < (Q3_n + 1.5*IQR_n)& 
                        df$avg_p > (Q1_p - 1.5*IQR_p) & df$avg_p < (Q3_p + 1.5*IQR_p) & 
                        df$avg_nsy > (Q1_nsy - 1.5*IQR_nsy) & df$avg_nsy < (Q3_nsy + 1.5*IQR_nsy) & 
                        df$avg_nry > (Q1_nry - 1.5*IQR_nry) & df$avg_nry < (Q3_nry + 1.5*IQR_nry) & 
                        df$avg_gi > (Q1_gi - 1.5*IQR_gi) & df$avg_gi < (Q3_gi + 1.5*IQR_gi) & 
                        df$ln_gdppc0 > (Q1_ln_gdppc0 - 1.5*IQR_ln_gdppc0) & df$ln_gdppc0 < (Q3_ln_gdppc0 + 1.5*IQR_ln_gdppc0) & 
                        df$avg_gx > (Q1_gx - 1.5*IQR_gx) & df$avg_gx < (Q3_gx + 1.5*IQR_gx))


 table_no_outliers<-round(describe(no_outliers[,c('ln_gdppc',
                                                 'avg_gdpgrowth','ln_gdppc0','avg_n','avg_p', 'avg_nsy',
                                                 'avg_nry','avg_gi','avg_gx','avg_educ'
)], fast=TRUE),2)
table_no_outliers<- as.data.frame(table_no_outliers)
rownames(table_no_outliers)<-c("log BNP per innbygger i 2019 (ln_gdppc)","Gjennomsnittlig årlig vekstrate i BNP \npc 2000-2019 (%) (avg_gdpgrowth)","log BNP per innbygger i 2000 (ln_gdppc0)", "Gjennomsnittlig årlig vekstrate i arbeidskraften (%) (avg_n)","Gjennomsnittlig årlig befolkningsvekst (%) (avg_p)","Gjennomsnittlig sparing for perioden 2000-2015 (%) (avg_nsy)","Gjennomsnittlig årlig vekstrate (negativ) i naturressurser (%) (avg_nry)", "Gjennomsnittlig årlig vekstrate i investeringer (%) (avg_gi)","Gjennomsnittlig årlig vekstrate i eksport (%) (avg_gx)","Gjennomsnittlig antall år i skole (avg_educ)")

model3 <- lm(avg_gdpgrowth ~ avg_educ  + avg_n + avg_p + avg_nsy + avg_nry + avg_gi + ln_gdppc0, data= no_outliers)
tab_model(model3)

model4 <- lm(avg_gdpgrowth ~ avg_educ + avg_n + avg_p + avg_nsy + avg_nry + avg_gi + ln_gdppc0 + avg_gx, data= no_outliers)
tab_model(model4)

